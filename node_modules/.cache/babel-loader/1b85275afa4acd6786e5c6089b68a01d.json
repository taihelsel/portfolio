{"ast":null,"code":"import _classCallCheck from \"/home/tai/Desktop/dev/anesthesia/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tai/Desktop/dev/anesthesia/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/tai/Desktop/dev/anesthesia/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tai/Desktop/dev/anesthesia/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/tai/Desktop/dev/anesthesia/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/tai/Desktop/dev/anesthesia/src/components/MediumIcon/MediumIcon.js\";\nimport React, { Component } from 'react';\nimport './MediumIcon.css';\n\nvar MediumIcon =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MediumIcon, _Component);\n\n  function MediumIcon() {\n    var _this;\n\n    _classCallCheck(this, MediumIcon);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MediumIcon).call(this));\n\n    _this.handleIconClick = function (e) {\n      if (_this.state.clickCount >= 1) {\n        switch (_this.props.data.type) {\n          case \"folder\":\n            _this.props.handleFolderClick(e, _this.props.data.name, _this.props.data.content);\n\n            break;\n\n          case \"text\":\n            _this.props.handleTextDocClick(e, _this.props.data.name, _this.props.data.content);\n\n            break;\n\n          case \"text/pdf\":\n            _this.props.handleFileOption(e, \"Open file as\", [\"text\", \"pdf\"]);\n\n            break;\n\n          default:\n            console.log(\"need to handle other file types\");\n            break;\n        }\n\n        _this.setState({\n          clickCount: 0\n        });\n      } else {\n        var newClickCount = _this.state.clickCount;\n        newClickCount++;\n\n        _this.setState({\n          clickCount: newClickCount\n        });\n      }\n    };\n\n    _this.state = {\n      clickCount: 0\n    };\n    return _this;\n  }\n\n  _createClass(MediumIcon, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var iconImg = null;\n\n      switch (this.props.data.type) {\n        case \"folder\":\n          iconImg = require(\"../.././media/icons/folder.png\");\n          break;\n\n        case \"text\":\n          iconImg = require(\"../.././media/icons/text.png\");\n          break;\n\n        case \"text/pdf\":\n          iconImg = require(\"../.././media/icons/text.png\");\n          break;\n\n        case \"html\":\n          iconImg = require(\"../.././media/icons/html.png\");\n          break;\n\n        default:\n          iconImg = require(\"../.././media/icons/folder.png\");\n          break;\n      }\n\n      if (this.state.clickCount > 0) {\n        setTimeout(function () {\n          _this2.setState({\n            clickCount: 0\n          });\n        }, 1500);\n      }\n\n      return React.createElement(\"div\", {\n        onClick: this.handleIconClick,\n        className: \"medium-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: iconImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, this.props.data.name));\n    }\n  }]);\n\n  return MediumIcon;\n}(Component);\n\nexport default MediumIcon;","map":{"version":3,"sources":["/home/tai/Desktop/dev/anesthesia/src/components/MediumIcon/MediumIcon.js"],"names":["React","Component","MediumIcon","handleIconClick","e","state","clickCount","props","data","type","handleFolderClick","name","content","handleTextDocClick","handleFileOption","console","log","setState","newClickCount","iconImg","require","setTimeout"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kBAAP;;IAEMC,U;;;;;AACJ,wBAAc;AAAA;;AAAA;;AACZ;;AADY,UAMdC,eANc,GAMI,UAACC,CAAD,EAAO;AACvB,UAAI,MAAKC,KAAL,CAAWC,UAAX,IAAyB,CAA7B,EAAgC;AAC9B,gBAAQ,MAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAxB;AACE,eAAK,QAAL;AACE,kBAAKF,KAAL,CAAWG,iBAAX,CAA6BN,CAA7B,EAAgC,MAAKG,KAAL,CAAWC,IAAX,CAAgBG,IAAhD,EAAsD,MAAKJ,KAAL,CAAWC,IAAX,CAAgBI,OAAtE;;AACA;;AACF,eAAK,MAAL;AACE,kBAAKL,KAAL,CAAWM,kBAAX,CAA8BT,CAA9B,EAAiC,MAAKG,KAAL,CAAWC,IAAX,CAAgBG,IAAjD,EAAuD,MAAKJ,KAAL,CAAWC,IAAX,CAAgBI,OAAvE;;AACA;;AACF,eAAK,UAAL;AACE,kBAAKL,KAAL,CAAWO,gBAAX,CAA4BV,CAA5B,EAA+B,cAA/B,EAA+C,CAAC,MAAD,EAAQ,KAAR,CAA/C;;AACF;;AACA;AACEW,YAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA;AAZJ;;AAcA,cAAKC,QAAL,CAAc;AAAEX,UAAAA,UAAU,EAAE;AAAd,SAAd;AACD,OAhBD,MAgBO;AACL,YAAIY,aAAa,GAAG,MAAKb,KAAL,CAAWC,UAA/B;AACAY,QAAAA,aAAa;;AACb,cAAKD,QAAL,CAAc;AACZX,UAAAA,UAAU,EAAEY;AADA,SAAd;AAGD;AACF,KA9Ba;;AAEZ,UAAKb,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE;AADD,KAAb;AAFY;AAKb;;;;6BA0BQ;AAAA;;AACP,UAAIa,OAAO,GAAG,IAAd;;AACA,cAAQ,KAAKZ,KAAL,CAAWC,IAAX,CAAgBC,IAAxB;AACE,aAAK,QAAL;AACEU,UAAAA,OAAO,GAAGC,OAAO,CAAC,gCAAD,CAAjB;AACA;;AACF,aAAK,MAAL;AACED,UAAAA,OAAO,GAAGC,OAAO,CAAC,8BAAD,CAAjB;AACA;;AACF,aAAK,UAAL;AACED,UAAAA,OAAO,GAAGC,OAAO,CAAC,8BAAD,CAAjB;AACA;;AACF,aAAK,MAAL;AACED,UAAAA,OAAO,GAAGC,OAAO,CAAC,8BAAD,CAAjB;AACA;;AACF;AACED,UAAAA,OAAO,GAAGC,OAAO,CAAC,gCAAD,CAAjB;AACA;AAfJ;;AAiBA,UAAI,KAAKf,KAAL,CAAWC,UAAX,GAAwB,CAA5B,EAA+B;AAC7Be,QAAAA,UAAU,CAAC,YAAM;AACf,UAAA,MAAI,CAACJ,QAAL,CAAc;AACZX,YAAAA,UAAU,EAAE;AADA,WAAd;AAGD,SAJS,EAIP,IAJO,CAAV;AAKD;;AACD,aACE;AAAK,QAAA,OAAO,EAAE,KAAKH,eAAnB;AAAoC,QAAA,SAAS,EAAC,aAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAEgB,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKZ,KAAL,CAAWC,IAAX,CAAgBG,IAArB,CAFF,CADF;AAMD;;;;EAhEsBV,S;;AAmEzB,eAAeC,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport './MediumIcon.css';\n\nclass MediumIcon extends Component {\n  constructor() {\n    super();\n    this.state = {\n      clickCount: 0,\n    }\n  }\n  handleIconClick = (e) => {\n    if (this.state.clickCount >= 1) {\n      switch (this.props.data.type) {\n        case \"folder\":\n          this.props.handleFolderClick(e, this.props.data.name, this.props.data.content);\n          break;\n        case \"text\":\n          this.props.handleTextDocClick(e, this.props.data.name, this.props.data.content);\n          break;\n        case \"text/pdf\":\n          this.props.handleFileOption(e, \"Open file as\", [\"text\",\"pdf\"]);\n        break;\n        default:\n          console.log(\"need to handle other file types\");\n          break;\n      }\n      this.setState({ clickCount: 0 });\n    } else {\n      let newClickCount = this.state.clickCount;\n      newClickCount++;\n      this.setState({\n        clickCount: newClickCount\n      });\n    }\n  }\n  render() {\n    let iconImg = null;\n    switch (this.props.data.type) {\n      case \"folder\":\n        iconImg = require(\"../.././media/icons/folder.png\");\n        break;\n      case \"text\":\n        iconImg = require(\"../.././media/icons/text.png\");\n        break;\n      case \"text/pdf\":\n        iconImg = require(\"../.././media/icons/text.png\");\n        break;\n      case \"html\":\n        iconImg = require(\"../.././media/icons/html.png\");\n        break;\n      default:\n        iconImg = require(\"../.././media/icons/folder.png\");\n        break;\n    }\n    if (this.state.clickCount > 0) {\n      setTimeout(() => {\n        this.setState({\n          clickCount: 0,\n        });\n      }, 1500);\n    }\n    return (\n      <div onClick={this.handleIconClick} className=\"medium-icon\">\n        <img src={iconImg} />\n        <h3>{this.props.data.name}</h3>\n      </div>\n    );\n  }\n}\n\nexport default MediumIcon;\n"]},"metadata":{},"sourceType":"module"}